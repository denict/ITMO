ORG 0x0 ; Инициализация векторов прерывания
V0: WORD $DEFAULT 0x180 ; вектор прерывания #0
V1: WORD $INT1, 0x180 ; вектор прерывания #1
V2: WORD $INT2, 0x180 ; вектор прерывания #2
V3: WORD $DEFAULT 0x180 ; вектор прерывания #3
V4: WORD $DEFAULT 0x180 ; вектор прерывания #4
V5: WORD $DEFAULT 0x180 ; вектор прерывания #5
V6: WORD $DEFAULT 0x180 ; вектор прерывания #6
V7: WORD $DEFAULT 0x180 ; вектор прерывания #7

ORG 0x11 
X: WORD ? ; переменная

MAX: WORD 0x0016 ; 21, Максимальное значение X, которое удовлетворяет ОДЗ
MIN: WORD 0xFFEB ; -20,  Минимальное значение X, которое удовлетворяет ОДЗ
DEFAULT: IRET ; Обработка прерывания по умолчанию, просто возврат прерывания

START: DI
       CLA ; по ТЗ, программа должна игнорировать все необработанные прерывания
       OUT 0x1 ; Значение MR КВУ-0 равно 0 - на вектор 0, запрет прерываний для неиспользуемых ВУ
       OUT 0x7 ; MR КВУ-3 на вектор 0, запрет прерываний для неиспользуемых ВУ
       OUT 0xB ; MR КВУ-4 на вектор 0, запрет прерываний для неиспользуемых ВУ
       OUT 0xD ; MR КВУ-5 на вектор 0, запрет прерываний для неиспользуемых ВУ
       OUT 0x11 ; MR КВУ-6 на вектор 0, запрет прерываний для неиспользуемых ВУ
       OUT 0x15 ; MR КВУ-7 на вектор 0, запрет прерываний для неиспользуемых ВУ
       OUT 0x19 ; MR КВУ-8 на вектор 0, запрет прерываний для неиспользуемых ВУ
       OUT 0x1D ; MR КВУ-9 на вектор 0, запрет прерываний для неиспользуемых ВУ

       LD #0x9 ; Для загрузки  из аккумулятора в MR ВУ1 (1000|0001=1001)
       OUT 3 ; Разрешение прерываний для ВУ 1
       LD #0xA ; Для загрузки  из аккумулятора в MR ВУ2 (1000|0010=1010)
       OUT 5 ; Разрешение прерываний для ВУ 2
       EI ; Разрешение прерывания
       JUMP $MAIN

; Основная программа
MAIN: DI ; Запрет прерываний, для того, чтобы обеспечить полное выполнение программы (атомарность)
    LD X ; Загрузка переменной X
    DEC ; Декрементация в цикле
    CALL CHECK ; Проверка значения на ОДЗ
    ST X ; Сохранение значения X
    EI ; Разрешение прерывания
    JUMP MAIN ; Возврат в цикл


; Обработка прерывания ВУ 1
INT1:  DI ; Запрет на прерывание во время обработки прерывания
       LD X ; Загрузка переменной X
       NOP ; Отладочная точка остановки (NOP/HLT) для отладки. Всегда можно NOP заменить на HLT
       ASL ; X --> 2X
       ASL ; 2X --> 4X
       ASL ; 4X --> 8X
       SUB X ; 8X --> 7X
       SUB X ; 7X --> 6X
       ADD #2 ; -6X --> -6X + 2
       NOP
       OUT 2 ; Вывод F(x) = -6X + 2 в ВУ 1
       EI ; Разрешение прерывания
       IRET ; Возврат из обработки прерывания

TMP: WORD ?
; Обработка прерывания ВУ 2
INT2: DI ; Запрет на прерывание во время обработки прерывания
      CLA 
      IN 4 ; Считывание DR ВУ 2
      NOP 
      LD TMP ; Записываем в TMP значение DR ВУ 2
      ASL ; TMP --> 2TMP
      ADD TMP ; 2TMP --> 3TMP
      SUB X ;
      CALL CHECK ; Проверка значения на ОДЗ
      ST X ;
      NOP 
      EI ; Разрешение прерывания
      IRET ; Возврат из обработки прерывания





; Проверка принадлежности X к ОДЗ      
CHECK: CMP MAX ; Если X < MAX, то 
       BMI CHECK_MIN ; проверка на нижнюю границу X > MIN
       JUMP LD_MAX ; X не входит в ОДЗ, поэтому X будет принимать максимальное значение
CHECK_MIN: CMP MIN ; Проверка X > MIN
           BPL RETURN ; Если X > MIN, то X принадлежит ОДЗ, возвращаемся в основную программу
           JUMP LD_MAX     
LD_MAX: LD MAX ; Загрузка максимального числа в AC, Если X не принадлежит к ОДЗ
RETURN: RET ; Метка возврата из проверки на ОДЗ




; Программное прерывание сэмулировать, сэмулировать пользователя, 
; Написать кусочек кода, сам в себе является прерыванием. Он взял и прервал команду.
; Программное прерывание - сэмулировать или доказать, что её нет.
; Нельзя получить ответ  от ВУ. Ждём от номер вектора прерывания.



    
       

    

    

