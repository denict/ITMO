ORG     	0x440	; Адрес начала программы
STR:		WORD 0x60D  ; Размещаемая строка находится по адресу 60D
STOP: WORD 0x00  ; Стоп-символ
MASK_FIRST_SYMBOL: WORD 0x00FF ; Маска для того, чтобы остался младший байт
TEMPORARY: WORD ? ; хранится копия аккумулятора
START:	CLA		; Очистка аккумулятора
S1:		IN 3		; Ожидание начала записи нечетного символа в ВУ-1
		AND #0x40	; Бит 6 SR == 0 (кнопка "ГОТОВ" нажата?)
		BEQ S1	    ; Нет - "Спин-луп"
		LD (STR)+    ; Загрузка двух символов в порядке СИМ_ЧЁТ-СИМ_НЕЧ, инкрементация ссылки на следующие два символа
		ST TEMPORARY ; Сохранение копии акуммулятора во временную переменную
		OUT 2 ; Загрузка нечётного символа в УВ-1
		AND MASK_FIRST_SYMBOL; Остаётся младший байт, нечётный символ, 0-СИМ_Нечётный
		CMP STOP ; Проверяем на стоп-символ
		BEQ EXIT ; Если стоп-символ, то выход
		CLA		; Очистка аккумулятора
S2:		IN 3		; Ожидание начала записи четного символа в ВУ-1
		AND #0x40	; Бит 6 SR == 0 (кнопка "ГОТОВ" нажата?)
		BEQ S2	    ; Нет - "Спин-луп"
		OR TEMPORARY ; Берём копию двух символов из временной переменной СИМ_ЧЁТ-СИМ_НЕЧ
		SWAB ; Перемещаем четный символ в младший байт, нечётный символ в старший байт, СИМ_НЕЧ-СИМ_ЧЁТ
		OUT 2 ; Загрузка чётного символа в УВ-1
		AND MASK_FIRST_SYMBOL ; Остаётся младший байт, чётный символ, 0-СИМ_Чётный
		CMP STOP ; Проверяем на стоп-символ
		BEQ EXIT ; Если стоп-символ, то выход
		CLA 
		JUMP S1 ; Возвращаемся в начало цикла для считывания следующей пары символов
EXIT:	CLA ; Очистка аккумулятора
		ST TEMPORARY ; чистка временной переменной
		HLT		; Остановка программы
